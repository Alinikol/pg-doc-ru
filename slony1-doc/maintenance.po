msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2016-11-10 14:04+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: maintenance.xml:3(title)
msgid "&slony1; Watchdog"
msgstr ""

#: maintenance.xml:5(title)
msgid "Watchdogs: Keeping Slons Running"
msgstr ""

#: maintenance.xml:7(indexterm)
msgid "<primary>watchdogs to keep slon daemons running</primary>"
msgstr ""

#: maintenance.xml:9(para)
msgid ""
"There are a couple of <quote>watchdog</quote> scripts available that monitor "
"things, and restart the <application>slon</application> processes should "
"they happen to die for some reason, such as a network <quote>glitch</quote> "
"that causes loss of connectivity."
msgstr ""

#: maintenance.xml:14(para)
msgid "You might want to run them..."
msgstr ""

#: maintenance.xml:16(para)
msgid ""
"The <quote>best new way</quote> of managing <xref linkend=\"slon\"/> "
"processes is via the combination of <xref linkend=\"mkslonconf\"/>, which "
"creates a configuration file for each node in a cluster, and <xref linkend="
"\"launchclusters\"/>, which uses those configuration files."
msgstr ""

#: maintenance.xml:22(para)
msgid ""
"This approach is preferable to elder <quote>watchdog</quote> systems in that "
"you can very precisely <quote>nail down,</quote> in each config file, the "
"exact desired configuration for each node, and not need to be concerned with "
"what options the watchdog script may or may not give you. This is "
"particularly important if you are using <link linkend=\"logshipping\"> log "
"shipping </link>, where forgetting the <command>-a</command> option could "
"ruin your log shipped node, and thereby your whole day."
msgstr ""

#: maintenance.xml:35(title)
msgid "Testing &slony1; State"
msgstr ""

#: maintenance.xml:37(title)
msgid "test_slony_state"
msgstr ""

#: maintenance.xml:38(indexterm)
msgid "<primary>testing cluster status</primary>"
msgstr ""

#: maintenance.xml:40(para)
msgid ""
"In the <filename>tools</filename> directory, you will find &lteststate; "
"scripts called <filename>test_slony_state.pl</filename> and "
"<filename>test_slony_state-dbi.pl</filename>. One uses the Perl/DBI "
"interface; the other uses the Pg interface."
msgstr ""

#: maintenance.xml:46(para)
msgid ""
"Both do essentially the same thing, namely to connect to a &slony1; node "
"(you can pick any one), and from that, determine all the nodes in the "
"cluster. They then run a series of queries (read only, so this should be "
"quite safe to run) which examine various &slony1; tables, looking for a "
"variety of sorts of conditions suggestive of problems, including:"
msgstr ""

#: maintenance.xml:55(para)
msgid "Bloating of tables like pg_listener, sl_log_1, sl_log_2, sl_seqlog"
msgstr ""

#: maintenance.xml:56(para)
msgid "Listen paths"
msgstr ""

#: maintenance.xml:57(para)
msgid "Analysis of Event propagation"
msgstr ""

#: maintenance.xml:58(para)
msgid "Analysis of Event confirmation propagation"
msgstr ""

#: maintenance.xml:60(para)
msgid ""
"If communications is a <emphasis>little</emphasis> broken, replication may "
"happen, but confirmations may not get back, which prevents nodes from "
"clearing out old events and old replication data."
msgstr ""

#: maintenance.xml:66(para)
msgid ""
"Running this once an hour or once a day can help you detect symptoms of "
"problems early, before they lead to performance degradation."
msgstr ""

#: maintenance.xml:71(title)
msgid "Replication Test Scripts"
msgstr ""

#: maintenance.xml:73(indexterm)
msgid "<primary>test scripts</primary>"
msgstr ""

#: maintenance.xml:81(para)
msgid ""
"<command>test_slony_replication</command> is a Perl script to which you can "
"pass connection information to get to a &slony1; node. It then queries <xref "
"linkend=\"table.sl-path\"/> and other information on that node in order to "
"determine the shape of the requested replication set."
msgstr ""

#: maintenance.xml:91(programlisting)
#, no-wrap
msgid ""
"CREATE TABLE slony_test (\n"
"    description text,\n"
"    mod_date timestamp with time zone,\n"
"    \"_Slony-I_testcluster_rowID\" bigint DEFAULT nextval('\"_testcluster\".sl_rowid_seq'::text) NOT NULL\n"
");"
msgstr ""

#: maintenance.xml:87(para)
msgid ""
"It then injects some test queries to a test table called <envar>slony_test</"
"envar> which is defined as follows, and which needs to be added to the set "
"of tables being replicated: <placeholder-1/>"
msgstr ""

#: maintenance.xml:99(para)
msgid ""
"The last column in that table was defined by &slony1; as one lacking a "
"primary key..."
msgstr ""

#: maintenance.xml:102(para)
msgid ""
"This script generates a line of output for each &slony1; node that is active "
"for the requested replication set in a file called <filename>cluster.fact."
"log</filename>."
msgstr ""

#: maintenance.xml:106(para)
msgid ""
"There is an additional <option>finalquery</option> option that allows you to "
"pass in an application-specific SQL query that can determine something about "
"the state of your application."
msgstr ""

#: maintenance.xml:110(para)
msgid ""
"<command>log.pm</command> is a Perl module that manages logging for the Perl "
"scripts."
msgstr ""

#: maintenance.xml:113(para)
msgid ""
"<command>run_rep_tests.sh</command> is a <quote>wrapper</quote> script that "
"runs <command>test_slony_replication</command>."
msgstr ""

#: maintenance.xml:116(para)
msgid ""
"If you have several &slony1; clusters, you might set up configuration in "
"this file to connect to all those clusters."
msgstr ""

#: maintenance.xml:120(para)
msgid ""
"<command>nagios_slony_test</command> is a script that was constructed to "
"query the log files so that you might run the replication tests every so "
"often (we run them every 6 minutes), and then a system monitoring tool such "
"as <ulink url=\"http://www.nagios.org/\"><productname>Nagios</productname></"
"ulink> can be set up to use this script to query the state indicated in "
"those logs."
msgstr ""

#: maintenance.xml:128(para)
msgid ""
"It seemed rather more efficient to have a <application>cron</application> "
"job run the tests and have <productname>Nagios</productname> check the "
"results rather than having <productname>Nagios</productname> run the tests "
"directly. The tests can exercise the whole &slony1; cluster at once rather "
"than <productname>Nagios</productname> invoking updates over and over again."
msgstr ""

#: maintenance.xml:76(para)
msgid ""
"In the directory <filename>tools</filename> may be found four scripts that "
"may be used to do monitoring of &slony1; instances: <placeholder-1/>"
msgstr ""

#: maintenance.xml:139(title)
msgid "Other Replication Tests"
msgstr ""

#: maintenance.xml:141(indexterm)
msgid "<primary>testing replication</primary>"
msgstr ""

#: maintenance.xml:143(para)
msgid ""
"The methodology of the previous section is designed with a view to "
"minimizing the cost of submitting replication test queries; on a busy "
"cluster, supporting hundreds of users, the cost associated with running a "
"few queries is likely to be pretty irrelevant, and the setup cost to "
"configure the tables and data injectors is pretty high."
msgstr ""

#: maintenance.xml:149(para)
msgid ""
"Three other methods for analyzing the state of replication have stood out:"
msgstr ""

#: maintenance.xml:154(para)
msgid ""
"For an application-oriented test, it has been useful to set up a view on "
"some frequently updated table that pulls application-specific information."
msgstr ""

#: maintenance.xml:158(para)
msgid ""
"For instance, one might look either at some statistics about a most recently "
"created application object, or an application transaction. For instance:"
msgstr ""

#: maintenance.xml:162(command)
msgid ""
"create view replication_test as select now() - txn_time as age, object_name "
"from transaction_table order by txn_time desc limit 1;"
msgstr ""

#: maintenance.xml:166(command)
msgid ""
"create view replication_test as select now() - created_on as age, "
"object_name from object_table order by id desc limit 1;"
msgstr ""

#: maintenance.xml:170(para)
msgid ""
"There is a downside: This approach requires that you have regular activity "
"going through the system that will lead to there being new transactions on a "
"regular basis. If something breaks down with your application, you may start "
"getting spurious warnings about replication being behind, despite the fact "
"that replication is working fine."
msgstr ""

#: maintenance.xml:179(para)
msgid ""
"The &slony1;-defined view, <envar>sl_status</envar> provides information as "
"to how up to date different nodes are. Its contents are only really "
"interesting on origin nodes, as the events generated on other nodes are "
"generally ignorable."
msgstr ""

#: maintenance.xml:185(para)
msgid "See also the <xref linkend=\"slonymrtg\"/> discussion."
msgstr ""

#: maintenance.xml:193(title)
msgid "Log Files"
msgstr ""

#: maintenance.xml:195(indexterm)
msgid "<primary>log files</primary>"
msgstr ""

#: maintenance.xml:203(para)
msgid ""
"Use a log rotator like <productname>Apache</productname> "
"<application>rotatelogs</application> to have a sequence of log files so "
"that no one of them gets too big;"
msgstr ""

#: maintenance.xml:208(para)
msgid "Purge out old log files, periodically."
msgstr ""

#: maintenance.xml:197(para)
msgid ""
"<xref linkend=\"slon\"/> daemons generate some more-or-less verbose log "
"files, depending on what debugging level is turned on. You might assortedly "
"wish to: <placeholder-1/>"
msgstr ""

#: maintenance.xml:216(title)
msgid "mkservice"
msgstr ""

#: maintenance.xml:217(indexterm)
msgid "<primary>mkservice for BSD </primary>"
msgstr ""

#: maintenance.xml:219(title)
msgid "slon-mkservice.sh"
msgstr ""

#: maintenance.xml:221(para)
msgid ""
"Create a slon service directory for use with svscan from daemontools. This "
"uses multilog in a pretty basic way, which seems to be standard for "
"daemontools / multilog setups. If you want clever logging, see logrep below. "
"Currently this script has very limited error handling capabilities."
msgstr ""

#: maintenance.xml:227(para)
msgid ""
"For non-interactive use, set the following environment variables. "
"<envar>BASEDIR</envar> <envar>SYSUSR</envar> <envar>PASSFILE</envar> "
"<envar>DBUSER</envar> <envar>HOST</envar> <envar>PORT</envar> "
"<envar>DATABASE</envar> <envar>CLUSTER</envar> <envar>SLON_BINARY</envar> If "
"any of the above are not set, the script asks for configuration information "
"interactively."
msgstr ""

#: maintenance.xml:235(para)
msgid ""
"<envar>BASEDIR</envar> where you want the service directory structure for "
"the slon to be created. This should <emphasis>not</emphasis> be the "
"<filename>/var/service</filename> directory."
msgstr ""

#: maintenance.xml:238(para)
msgid ""
"<envar>SYSUSR</envar> the unix user under which the slon (and multilog) "
"process should run."
msgstr ""

#: maintenance.xml:240(para)
msgid ""
"<envar>PASSFILE</envar> location of the <filename>.pgpass</filename> file to "
"be used. (default <filename>~sysusr/.pgpass</filename>)"
msgstr ""

#: maintenance.xml:242(para)
msgid ""
"<envar>DBUSER</envar> the postgres user the slon should connect as (default "
"slony)"
msgstr ""

#: maintenance.xml:244(para)
msgid ""
"<envar>HOST</envar> what database server to connect to (default localhost)"
msgstr ""

#: maintenance.xml:246(para)
msgid "<envar>PORT</envar> what port to connect to (default 5432)"
msgstr ""

#: maintenance.xml:248(para)
msgid "<envar>DATABASE</envar> which database to connect to (default dbuser)"
msgstr ""

#: maintenance.xml:250(para)
msgid ""
"<envar>CLUSTER</envar> the name of your Slony1 cluster? (default database)"
msgstr ""

#: maintenance.xml:252(para)
msgid ""
"<envar>SLON_BINARY</envar> the full path name of the slon binary (default "
"<command>which slon</command>)"
msgstr ""

#: maintenance.xml:257(title)
msgid "logrep-mkservice.sh"
msgstr ""

#: maintenance.xml:259(indexterm)
msgid "<primary>logrep - multilog filters</primary>"
msgstr ""

#: maintenance.xml:262(para)
msgid ""
"This uses <command>tail -F</command> to pull data from log files allowing "
"you to use multilog filters (by setting the CRITERIA) to create special "
"purpose log files. The goal is to provide a way to monitor log files in near "
"realtime for <quote>interesting</quote> data without either hacking up the "
"initial log file or wasting CPU/IO by re-scanning the same log repeatedly."
msgstr ""

#: maintenance.xml:270(para)
msgid ""
"For non-interactive use, set the following environment variables. "
"<envar>BASEDIR</envar> <envar>SYSUSR</envar> <envar>SOURCE</envar> "
"<envar>EXTENSION</envar> <envar>CRITERIA</envar> If any of the above are not "
"set, the script asks for configuration information interactively."
msgstr ""

#: maintenance.xml:277(para)
msgid ""
"<envar>BASEDIR</envar> where you want the service directory structure for "
"the logrep to be created. This should <emphasis>not</emphasis> be the "
"<filename>/var/service</filename> directory."
msgstr ""

#: maintenance.xml:280(para)
msgid "<envar>SYSUSR</envar> unix user under which the service should run."
msgstr ""

#: maintenance.xml:281(para)
msgid ""
"<envar>SOURCE</envar> name of the service with the log you want to follow."
msgstr ""

#: maintenance.xml:282(para)
msgid ""
"<envar>EXTENSION</envar> a tag to differentiate this logrep from others "
"using the same source."
msgstr ""

#: maintenance.xml:283(para)
msgid "<envar>CRITERIA</envar> the multilog filter you want to use."
msgstr ""

#: maintenance.xml:286(para)
msgid ""
"A trivial example of this would be to provide a log file of all slon ERROR "
"messages which could be used to trigger a nagios alarm. "
"<command>EXTENSION='ERRORS'</command> <command>CRITERIA=\"'-*' '+* * "
"ERROR*'\"</command> (Reset the monitor by rotating the log using "
"<command>svc -a $svc_dir</command>)"
msgstr ""

#: maintenance.xml:293(para)
msgid ""
"A more interesting application is a subscription progress log. "
"<command>EXTENSION='COPY'</command> <command>CRITERIA=\"'-*' '+* * ERROR*' "
"'+* * WARN*' '+* * CONFIG enableSubscription*' '+* * DEBUG2 "
"remoteWorkerThread_* prepare to copy table*' '+* * DEBUG2 "
"remoteWorkerThread_* all tables for set * found on subscriber*' '+* * DEBUG2 "
"remoteWorkerThread_* copy*' '+* * DEBUG2 remoteWorkerThread_* Begin COPY of "
"table*' '+* * DEBUG2 remoteWorkerThread_* * bytes copied for table*' '+* * "
"DEBUG2 remoteWorkerThread_* * seconds to*' '+* * DEBUG2 remoteWorkerThread_* "
"set last_value of sequence*' '+* * DEBUG2 remoteWorkerThread_* copy_set*'\"</"
"command>"
msgstr ""

#: maintenance.xml:298(para)
msgid ""
"If you have a subscription log then it's easy to determine if a given slon "
"is in the process of handling copies or other subscription activity. If the "
"log isn't empty, and doesn't end with a <command>\"CONFIG "
"enableSubscription: sub_set:1\"</command> (or whatever set number you've "
"subscribed) then the slon is currently in the middle of initial copies."
msgstr ""

#: maintenance.xml:305(para)
msgid ""
"If you happen to be monitoring the mtime of your primary slony logs to "
"determine if your slon has gone brain-dead, checking this is a good way to "
"avoid mistakenly clobbering it in the middle of a subscribe. As a bonus, "
"recall that since the the slons are running under svscan, you only need to "
"kill it (via the svc interface) and let svscan start it up again laster. "
"I've also found the COPY logs handy for following subscribe activity "
"interactively."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: maintenance.xml:0(None)
msgid "translator-credits"
msgstr ""
