# Copyright (C)
# This file is distributed under the same license as the Python package.
#
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
# Alexander LAW <exclusion@gmail.com>, 2016.
msgid ""
msgstr ""
"Project-Id-Version: pgAdmin III\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-21 14:16+0300\n"
"PO-Revision-Date: 2016-10-28 18:25+0300\n"
"Last-Translator: Alexander LAW <exclusion@gmail.com>\n"
"Language-Team: Russian <pgsql-ru-general@postgresql.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 1.3\n"
"Language: ru_RU\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"X-Generator: Lokalize 2.0\n"

#: ../../en_US/default-xsl.rst:6
msgid "`Default XSL Stylesheet`:index:"
msgstr "`Встроенное XSL-преобразование`:index:"

#: ../../en_US/default-xsl.rst:8
msgid ""
"For reference, and as a starting point for your own stylesheets, the builtin "
"stylesheet that pgadmin uses to render XHTML report output from XML report "
"data is included below. This stylesheet includes the default HTML stylesheet "
"that will be embedded into a report to give it the pgadmin look and feel."
msgstr ""
"Для информации, а также в качестве отправной точки для разработки ваших "
"собственных преобразований, ниже показано встроенное преобразование, "
"применяя которое pgAdmin получает вывод в XHTML из XML-данных отчёта. Это "
"преобразование включает стандартный HTML-стиль, который будет внедрён в "
"отчёт и придаст ему оформление, присущее pgAdmin."

#: ../../en_US/default-xsl.rst:16
msgid ""
"<?xml version=\"1.0\"?>\n"
"<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/"
"Transform\">\n"
"<xsl:output method=\"xml\" doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/"
"xhtml1-transitional.dtd\" doctype-public=\"-//W3C//DTD XHTML 1.0 "
"Transitional//EN\" indent=\"yes\" encoding=\"utf-8\" />\n"
"<xsl:template match=\"/report\">\n"
"\n"
"<html>\n"
"  <head>\n"
"    <xsl:if test=\"header/title != ''\">\n"
"      <title><xsl:value-of select=\"header/title\" /></title>\n"
"    </xsl:if>\n"
"    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /"
">\n"
"    <style type=\"text/css\">\n"
"      body {  font-family: verdana, helvetica, sans-serif; margin: 0px; "
"padding: 0; }\n"
"      h1 { font-weight: bold; font-size: 150%; border-bottom-style: solid; "
"border-bottom-width: 2px; margin-top: 0px; padding-bottom: 0.5ex; color: "
"#EBA525; overflow: hidden; text-overflow: ellipsis; }\n"
"      h2 { font-size: 130%; padding-bottom: 0.5ex; color: #47678E; border-"
"bottom-style: solid; border-bottom-width: 2px; }\n"
"      h3 { font-size: 110%; padding-bottom: 0.5ex; color: #000000; }\n"
"      th { text-align: left; background-color: #47678E; color: #EBA525; }\n"
"      #ReportHeader { padding: 10px; background-color: #47678E; color: "
"#EEEEEE; border-bottom-style: solid; border-bottom-width: 2px; border-color: "
"#EBA525; }\n"
"      #ReportHeader th { width: 25%; white-space: nowrap; vertical-align: "
"top; }\n"
"      #ReportHeader td { vertical-align: top; color: #EEEEEE; }\n"
"      #ReportNotes { padding: 10px; background-color: #EEEEEE; font-size: "
"80%; border-bottom-style: solid; border-bottom-width: 2px; border-color: "
"#EBA525; }\n"
"      .ReportSQL { margin-bottom: 10px; padding: 10px; display: block; "
"background-color: #eeeeee; font-family: monospace; }\n"
"      #ReportDetails { margin-left: 10px; margin-right: 10px; margin-bottom: "
"10px; }\n"
"      #ReportDetails td, th { font-size: 80%; margin-left: 2px; margin-"
"right: 2px; }\n"
"      #ReportDetails th { border-bottom-color: #777777; border-bottom-style: "
"solid; border-bottom-width: 2px; }\n"
"      .ReportDetailsOddDataRow { background-color: #dddddd; }\n"
"      .ReportDetailsEvenDataRow { background-color: #eeeeee; }\n"
"      .ReportTableHeaderCell { background-color: #dddddd; color: #47678E; "
"vertical-align: top; font-size: 80%; white-space: nowrap; }\n"
"      .ReportTableValueCell { vertical-align: top; font-size: 80%; white-"
"space: nowrap; }\n"
"      .ReportTableInfo { font-size: 80%; font-style: italic; }\n"
"      #ReportFooter { font-weight: bold; font-size: 80%; text-align: right; "
"background-color: #47678E; color: #eeeeee; margin-top: 10px; padding: 2px; "
"border-bottom-style: solid; border-bottom-width: 2px; border-top-style: "
"solid; border-top-width: 2px; border-color: #EBA525; }\n"
"      #ReportFooter a { color: #EBA525; text-decoration: none; }\n"
"    </style>\n"
"  </head>\n"
"\n"
"  <body>\n"
"    <div id=\"ReportHeader\">\n"
"\n"
"    <xsl:if test=\"header/title != ''\">\n"
"      <h1><xsl:value-of select=\"header/title\" /></h1>\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/generated != ''\">\n"
"      <b>Generated: </b><xsl:value-of select=\"header/generated\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/server != ''\">\n"
"      <b>Server: </b><xsl:value-of select=\"header/server\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/database != ''\">\n"
"      <b>Database: </b><xsl:value-of select=\"header/database\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/catalog != ''\">\n"
"      <b>Catalog: </b><xsl:value-of select=\"header/catalog\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/schema != ''\">\n"
"      <b>Schema: </b><xsl:value-of select=\"header/schema\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/table != ''\">\n"
"      <b>Table: </b><xsl:value-of select=\"header/table\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/job != ''\">\n"
"      <b>Job: </b><xsl:value-of select=\"header/job\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    </div>\n"
"\n"
"    <xsl:if test=\"header/notes != ''\">\n"
"      <div id=\"ReportNotes\">\n"
"      <b>Notes: </b><br /><br />\n"
"      <xsl:call-template name=\"substitute\">\n"
"         <xsl:with-param name=\"string\" select=\"header/notes\" />\n"
"      </xsl:call-template>\n"
"      </div>\n"
"    </xsl:if>\n"
"\n"
"    <div id=\"ReportDetails\">\n"
"      <xsl:apply-templates select=\"section\" >\n"
"        <xsl:sort select=\"@number\" data-type=\"number\" order=\"ascending"
"\" />\n"
"      </xsl:apply-templates>\n"
"    </div>\n"
"\n"
"    <div id=\"ReportFooter\">\n"
"Report generated by <a href=\"http://www.enterprisedb.com/\">Postgres "
"Enterprise Manager&#8482;</a>\n"
"    </div>\n"
"\n"
"    <br />\n"
"  </body>\n"
"</html>\n"
"\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"section\">\n"
"  <xsl:if test=\"../section[@id = current()/@id]/@name != ''\">\n"
"    <h2><xsl:value-of select=\"../section[@id = current()/@id]/@name\" /></"
"h2>\n"
"  </xsl:if>\n"
"\n"
"  <xsl:if test=\"count(../section[@id = current()/@id]/table/columns/column) "
"> 0\">\n"
"    <div style=overflow:auto>\n"
"      <table>\n"
"        <tr>\n"
"          <xsl:apply-templates select=\"../section[@id = current()/@id]/"
"table/columns/column\">\n"
"            <xsl:sort select=\"@number\" data-type=\"number\" order="
"\"ascending\" />\n"
"            <xsl:with-param name=\"count\" select=\"count(../section[@id = "
"current()/@id]/table/columns/column)\" />\n"
"          </xsl:apply-templates>\n"
"        </tr>\n"
"        <xsl:apply-templates select=\"../section[@id = current()/@id]/table/"
"rows/*\" mode=\"rows\">\n"
"          <xsl:sort select=\"@number\" data-type=\"number\" order=\"ascending"
"\" />\n"
"          <xsl:with-param name=\"column-meta\" select=\"../section[@id = "
"current()/@id]/table/columns/column\" />\n"
"        </xsl:apply-templates>\n"
"      </table>\n"
"    </div>\n"
"    <br />\n"
"    <xsl:if test=\"../section[@id = current()/@id]/table/info != ''\">\n"
"      <p class=\"ReportTableInfo\"><xsl:value-of select=\"../section[@id = "
"current()/@id]/table/info\" /></p>\n"
"    </xsl:if>\n"
"  </xsl:if>\n"
"\n"
"  <xsl:if test=\"../section[@id = current()/@id]/sql != ''\">\n"
"    <pre class=\"ReportSQL\">\n"
"      <xsl:call-template name=\"substitute\">\n"
"         <xsl:with-param name=\"string\" select=\"../section[@id = current()/"
"@id]/sql\" />\n"
"      </xsl:call-template>\n"
"    </pre>\n"
"  </xsl:if>\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"column\">\n"
"  <xsl:param name=\"count\" />\n"
"  <th class=\"ReportTableHeaderCell\">\n"
"  <xsl:attribute name=\"width\"><xsl:value-of select=\"100 div $count\" />%</"
"xsl:attribute>\n"
"    <xsl:call-template name=\"substitute\">\n"
"       <xsl:with-param name=\"string\" select=\"@name\" />\n"
"    </xsl:call-template>\n"
"  </th>\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"*\" mode=\"rows\">\n"
"  <xsl:param name=\"column-meta\" />\n"
"  <tr>\n"
"  <xsl:choose>\n"
"  <xsl:when test=\"position() mod 2 != 1\">\n"
"    <xsl:attribute name=\"class\">ReportDetailsOddDataRow</xsl:attribute>\n"
"  </xsl:when>\n"
"  <xsl:otherwise>\n"
"    <xsl:attribute name=\"class\">ReportDetailsEvenDataRow</xsl:attribute>\n"
"  </xsl:otherwise>\n"
"  </xsl:choose>\n"
"    <xsl:apply-templates select=\"$column-meta\" mode=\"cells\">\n"
"      <xsl:with-param name=\"row\" select=\".\" />\n"
"    </xsl:apply-templates>\n"
"  </tr>\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"*\" mode=\"cells\">\n"
"  <xsl:param name=\"row\" />\n"
"    <td class=\"ReportTableValueCell\">\n"
"    <xsl:choose>\n"
"      <xsl:when test=\"$row/@*[name() = current()/@id]|$row/*[name() = "
"current()/@id] != ''\">\n"
"        <xsl:call-template name=\"substitute\">\n"
"          <xsl:with-param name=\"string\" select=\"$row/@*[name() = "
"current()/@id]|$row/*[name() = current()/@id]\" />\n"
"        </xsl:call-template>\n"
"      </xsl:when>\n"
"      <xsl:otherwise>\n"
"        <xsl:text> </xsl:text>\n"
"      </xsl:otherwise>\n"
"    </xsl:choose>\n"
"  </td>\n"
"</xsl:template>\n"
"\n"
"<xsl:template name=\"substitute\">\n"
"   <xsl:param name=\"string\" />\n"
"   <xsl:param name=\"from\" select=\"'\n"
"'\" />\n"
"   <xsl:param name=\"to\">\n"
"      <br />\n"
"   </xsl:param>\n"
"   <xsl:choose>\n"
"      <xsl:when test=\"contains($string, $from)\">\n"
"         <xsl:value-of select=\"substring-before($string, $from)\" />\n"
"         <xsl:copy-of select=\"$to\" />\n"
"         <xsl:call-template name=\"substitute\">\n"
"            <xsl:with-param name=\"string\" select=\"substring-"
"after($string, $from)\" />\n"
"            <xsl:with-param name=\"from\" select=\"$from\" />\n"
"            <xsl:with-param name=\"to\" select=\"$to\" />\n"
"         </xsl:call-template>\n"
"      </xsl:when>\n"
"      <xsl:otherwise>\n"
"         <xsl:value-of select=\"$string\" />\n"
"      </xsl:otherwise>\n"
"   </xsl:choose>\n"
"</xsl:template>\n"
"\n"
"</xsl:stylesheet>"
msgstr ""
"<?xml version=\"1.0\"?>\n"
"<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/"
"Transform\">\n"
"<xsl:output method=\"xml\" doctype-system=\"http://www.w3.org/TR/xhtml1/DTD/"
"xhtml1-transitional.dtd\" doctype-public=\"-//W3C//DTD XHTML 1.0 "
"Transitional//EN\" indent=\"yes\" encoding=\"utf-8\" />\n"
"<xsl:template match=\"/report\">\n"
"\n"
"<html>\n"
"  <head>\n"
"    <xsl:if test=\"header/title != ''\">\n"
"      <title><xsl:value-of select=\"header/title\" /></title>\n"
"    </xsl:if>\n"
"    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /"
">\n"
"    <style type=\"text/css\">\n"
"      body {  font-family: verdana, helvetica, sans-serif; margin: 0px; "
"padding: 0; }\n"
"      h1 { font-weight: bold; font-size: 150%; border-bottom-style: solid; "
"border-bottom-width: 2px; margin-top: 0px; padding-bottom: 0.5ex; color: "
"#EBA525; overflow: hidden; text-overflow: ellipsis; }\n"
"      h2 { font-size: 130%; padding-bottom: 0.5ex; color: #47678E; border-"
"bottom-style: solid; border-bottom-width: 2px; }\n"
"      h3 { font-size: 110%; padding-bottom: 0.5ex; color: #000000; }\n"
"      th { text-align: left; background-color: #47678E; color: #EBA525; }\n"
"      #ReportHeader { padding: 10px; background-color: #47678E; color: "
"#EEEEEE; border-bottom-style: solid; border-bottom-width: 2px; border-color: "
"#EBA525; }\n"
"      #ReportHeader th { width: 25%; white-space: nowrap; vertical-align: "
"top; }\n"
"      #ReportHeader td { vertical-align: top; color: #EEEEEE; }\n"
"      #ReportNotes { padding: 10px; background-color: #EEEEEE; font-size: "
"80%; border-bottom-style: solid; border-bottom-width: 2px; border-color: "
"#EBA525; }\n"
"      .ReportSQL { margin-bottom: 10px; padding: 10px; display: block; "
"background-color: #eeeeee; font-family: monospace; }\n"
"      #ReportDetails { margin-left: 10px; margin-right: 10px; margin-bottom: "
"10px; }\n"
"      #ReportDetails td, th { font-size: 80%; margin-left: 2px; margin-"
"right: 2px; }\n"
"      #ReportDetails th { border-bottom-color: #777777; border-bottom-style: "
"solid; border-bottom-width: 2px; }\n"
"      .ReportDetailsOddDataRow { background-color: #dddddd; }\n"
"      .ReportDetailsEvenDataRow { background-color: #eeeeee; }\n"
"      .ReportTableHeaderCell { background-color: #dddddd; color: #47678E; "
"vertical-align: top; font-size: 80%; white-space: nowrap; }\n"
"      .ReportTableValueCell { vertical-align: top; font-size: 80%; white-"
"space: nowrap; }\n"
"      .ReportTableInfo { font-size: 80%; font-style: italic; }\n"
"      #ReportFooter { font-weight: bold; font-size: 80%; text-align: right; "
"background-color: #47678E; color: #eeeeee; margin-top: 10px; padding: 2px; "
"border-bottom-style: solid; border-bottom-width: 2px; border-top-style: "
"solid; border-top-width: 2px; border-color: #EBA525; }\n"
"      #ReportFooter a { color: #EBA525; text-decoration: none; }\n"
"    </style>\n"
"  </head>\n"
"\n"
"  <body>\n"
"    <div id=\"ReportHeader\">\n"
"\n"
"    <xsl:if test=\"header/title != ''\">\n"
"      <h1><xsl:value-of select=\"header/title\" /></h1>\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/generated != ''\">\n"
"      <b>Generated: </b><xsl:value-of select=\"header/generated\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/server != ''\">\n"
"      <b>Server: </b><xsl:value-of select=\"header/server\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/database != ''\">\n"
"      <b>Database: </b><xsl:value-of select=\"header/database\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/catalog != ''\">\n"
"      <b>Catalog: </b><xsl:value-of select=\"header/catalog\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/schema != ''\">\n"
"      <b>Schema: </b><xsl:value-of select=\"header/schema\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/table != ''\">\n"
"      <b>Table: </b><xsl:value-of select=\"header/table\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    <xsl:if test=\"header/job != ''\">\n"
"      <b>Job: </b><xsl:value-of select=\"header/job\" /><br />\n"
"    </xsl:if>\n"
"\n"
"    </div>\n"
"\n"
"    <xsl:if test=\"header/notes != ''\">\n"
"      <div id=\"ReportNotes\">\n"
"      <b>Notes: </b><br /><br />\n"
"      <xsl:call-template name=\"substitute\">\n"
"         <xsl:with-param name=\"string\" select=\"header/notes\" />\n"
"      </xsl:call-template>\n"
"      </div>\n"
"    </xsl:if>\n"
"\n"
"    <div id=\"ReportDetails\">\n"
"      <xsl:apply-templates select=\"section\" >\n"
"        <xsl:sort select=\"@number\" data-type=\"number\" order=\"ascending"
"\" />\n"
"      </xsl:apply-templates>\n"
"    </div>\n"
"\n"
"    <div id=\"ReportFooter\">\n"
"Report generated by <a href=\"http://www.enterprisedb.com/\">Postgres "
"Enterprise Manager&#8482;</a>\n"
"    </div>\n"
"\n"
"    <br />\n"
"  </body>\n"
"</html>\n"
"\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"section\">\n"
"  <xsl:if test=\"../section[@id = current()/@id]/@name != ''\">\n"
"    <h2><xsl:value-of select=\"../section[@id = current()/@id]/@name\" /></"
"h2>\n"
"  </xsl:if>\n"
"\n"
"  <xsl:if test=\"count(../section[@id = current()/@id]/table/columns/column) "
"> 0\">\n"
"    <div style=overflow:auto>\n"
"      <table>\n"
"        <tr>\n"
"          <xsl:apply-templates select=\"../section[@id = current()/@id]/"
"table/columns/column\">\n"
"            <xsl:sort select=\"@number\" data-type=\"number\" order="
"\"ascending\" />\n"
"            <xsl:with-param name=\"count\" select=\"count(../section[@id = "
"current()/@id]/table/columns/column)\" />\n"
"          </xsl:apply-templates>\n"
"        </tr>\n"
"        <xsl:apply-templates select=\"../section[@id = current()/@id]/table/"
"rows/*\" mode=\"rows\">\n"
"          <xsl:sort select=\"@number\" data-type=\"number\" order=\"ascending"
"\" />\n"
"          <xsl:with-param name=\"column-meta\" select=\"../section[@id = "
"current()/@id]/table/columns/column\" />\n"
"        </xsl:apply-templates>\n"
"      </table>\n"
"    </div>\n"
"    <br />\n"
"    <xsl:if test=\"../section[@id = current()/@id]/table/info != ''\">\n"
"      <p class=\"ReportTableInfo\"><xsl:value-of select=\"../section[@id = "
"current()/@id]/table/info\" /></p>\n"
"    </xsl:if>\n"
"  </xsl:if>\n"
"\n"
"  <xsl:if test=\"../section[@id = current()/@id]/sql != ''\">\n"
"    <pre class=\"ReportSQL\">\n"
"      <xsl:call-template name=\"substitute\">\n"
"         <xsl:with-param name=\"string\" select=\"../section[@id = current()/"
"@id]/sql\" />\n"
"      </xsl:call-template>\n"
"    </pre>\n"
"  </xsl:if>\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"column\">\n"
"  <xsl:param name=\"count\" />\n"
"  <th class=\"ReportTableHeaderCell\">\n"
"  <xsl:attribute name=\"width\"><xsl:value-of select=\"100 div $count\" />%</"
"xsl:attribute>\n"
"    <xsl:call-template name=\"substitute\">\n"
"       <xsl:with-param name=\"string\" select=\"@name\" />\n"
"    </xsl:call-template>\n"
"  </th>\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"*\" mode=\"rows\">\n"
"  <xsl:param name=\"column-meta\" />\n"
"  <tr>\n"
"  <xsl:choose>\n"
"  <xsl:when test=\"position() mod 2 != 1\">\n"
"    <xsl:attribute name=\"class\">ReportDetailsOddDataRow</xsl:attribute>\n"
"  </xsl:when>\n"
"  <xsl:otherwise>\n"
"    <xsl:attribute name=\"class\">ReportDetailsEvenDataRow</xsl:attribute>\n"
"  </xsl:otherwise>\n"
"  </xsl:choose>\n"
"    <xsl:apply-templates select=\"$column-meta\" mode=\"cells\">\n"
"      <xsl:with-param name=\"row\" select=\".\" />\n"
"    </xsl:apply-templates>\n"
"  </tr>\n"
"</xsl:template>\n"
"\n"
"<xsl:template match=\"*\" mode=\"cells\">\n"
"  <xsl:param name=\"row\" />\n"
"    <td class=\"ReportTableValueCell\">\n"
"    <xsl:choose>\n"
"      <xsl:when test=\"$row/@*[name() = current()/@id]|$row/*[name() = "
"current()/@id] != ''\">\n"
"        <xsl:call-template name=\"substitute\">\n"
"          <xsl:with-param name=\"string\" select=\"$row/@*[name() = "
"current()/@id]|$row/*[name() = current()/@id]\" />\n"
"        </xsl:call-template>\n"
"      </xsl:when>\n"
"      <xsl:otherwise>\n"
"        <xsl:text> </xsl:text>\n"
"      </xsl:otherwise>\n"
"    </xsl:choose>\n"
"  </td>\n"
"</xsl:template>\n"
"\n"
"<xsl:template name=\"substitute\">\n"
"   <xsl:param name=\"string\" />\n"
"   <xsl:param name=\"from\" select=\"'\n"
"'\" />\n"
"   <xsl:param name=\"to\">\n"
"      <br />\n"
"   </xsl:param>\n"
"   <xsl:choose>\n"
"      <xsl:when test=\"contains($string, $from)\">\n"
"         <xsl:value-of select=\"substring-before($string, $from)\" />\n"
"         <xsl:copy-of select=\"$to\" />\n"
"         <xsl:call-template name=\"substitute\">\n"
"            <xsl:with-param name=\"string\" select=\"substring-"
"after($string, $from)\" />\n"
"            <xsl:with-param name=\"from\" select=\"$from\" />\n"
"            <xsl:with-param name=\"to\" select=\"$to\" />\n"
"         </xsl:call-template>\n"
"      </xsl:when>\n"
"      <xsl:otherwise>\n"
"         <xsl:value-of select=\"$string\" />\n"
"      </xsl:otherwise>\n"
"   </xsl:choose>\n"
"</xsl:template>\n"
"\n"
"</xsl:stylesheet>"
